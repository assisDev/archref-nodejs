name: CI/CD

on:
  push:
    branches:
      - develop

jobs:
  build-and-push:
    environment: develop
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Registry
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      uses: docker/build-push-action@v3
      with:
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/my-app:latest
        push: true
        file: ./Dockerfile
        context: .

    - name: Deploy to Docker Swarm
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          # Verifica se o servi√ßo existe
          if docker service ls | grep -q my-app; then
            echo "Service exists, updating with new settings..."
            docker service update \
              --image ${{ secrets.DOCKER_USERNAME }}/my-app:latest \
              --env-add dbUsername=${{ secrets.DB_USERNAME }} \
              --env-add dbPassword=${{ secrets.DB_PASSWORD }} \
              --env-add databaseName=${{ secrets.DATABASE_NAME }} \
              --env-add mongodbHost=${{ secrets.MONGODB_HOST }} \
              --env-add authSource=${{ secrets.AUTH_SOURCE }} \
              --env-add vaultPort=${{ secrets.VAULT_PORT }} \
              my-app
          else
            echo "Service does not exist, creating new service..."
            docker service create \
              --name my-app \
              --publish 3000:3000 \
              --replicas 2 \
              --env dbUsername=${{ secrets.DB_USERNAME }} \
              --env dbPassword=${{ secrets.DB_PASSWORD }} \
              --env databaseName=${{ secrets.DATABASE_NAME }} \
              --env mongodbHost=${{ secrets.MONGODB_HOST }} \
              --env authSource=${{ secrets.AUTH_SOURCE }} \
              --env vaultPort=${{ secrets.VAULT_PORT }} \
              ${{ secrets.DOCKER_USERNAME }}/my-app:latest
          fi
